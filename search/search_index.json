{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u7f16\u8bd1\u5668\u5b9e\u9a8c","text":"<p>Compiler</p>"},{"location":"#_2","title":"\u7b2c\u4e00\u90e8\u5206","text":"<p>\u8bcd\u6cd5\u5206\u6790</p>"},{"location":"#_3","title":"\u7b2c\u4e8c\u90e8\u5206","text":"<p>\u8bed\u6cd5\u5206\u6790</p>"},{"location":"%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E9%A1%B9%E7%9B%AE/","title":"\u8bcd\u6cd5\u5206\u6790\u5668\u9879\u76ee","text":""},{"location":"%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E9%A1%B9%E7%9B%AE/#1","title":"1 \u76ee\u7684","text":"<p>\u8fd9\u4e2a\u9879\u76ee\u662f\u7528C\u8bed\u8a00\u7f16\u5199\u4e00\u4e2a\u529f\u80fd\u5b8c\u5907\u7684C\u8bed\u8a00\u8bcd\u6cd5\u5206\u6790\u5668\u3002\u76ee\u7684\u662f\u4e3a\u4e86\u953b\u70bc\u5927\u5bb6\u7684C\u8bed\u8a00\u80fd\u529b\u3001\u57fa\u672c\u7684\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u80fd\u529b\uff0c\u4ee5\u53ca\u52a0\u6df1\u5927\u5bb6\u5bf9C\u8bed\u8a00\u7684\u8ba4\u8bc6\u3002</p>"},{"location":"%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E9%A1%B9%E7%9B%AE/#2","title":"2 \u7406\u8bba","text":"<p>\u4e00\u4e2a\u5b8c\u6574\u7684\u7f16\u8bd1\u5668\uff0c\u5927\u81f4\u4f1a\u7ecf\u5386\u5982\u4e0b\u51e0\u4e2a\u9636\u6bb5\uff1a</p> <p></p> <p>\u5404\u4e2a\u9636\u6bb5\u7684\u804c\u8d23\uff0c\u7b80\u5355\u63cf\u8ff0\u5982\u4e0b\uff1a</p> <ol> <li> <p>\u8bcd\u6cd5\u5206\u6790\uff1a\u5bf9\u6e90\u6587\u4ef6\u8fdb\u884c\u626b\u63cf\uff0c\u5c06\u6e90\u6587\u4ef6\u7684\u5b57\u7b26\u5212\u5206\u4e3a\u4e00\u4e2a\u4e00\u4e2a\u7684\u8bb0\u53f7(token) (\u6ce8\uff1a\u7c7b\u4f3c\u4e2d\u6587\u4e2d\u7684\u5206\u8bcd)\u3002 </p> </li> <li> <p>\u8bed\u6cd5\u5206\u6790\uff1a\u6839\u636e\u8bed\u6cd5\u89c4\u5219\u5c06 Token \u5e8f\u5217\u6784\u9020\u4e3a\u8bed\u6cd5\u6811\u3002</p> </li> <li> <p>\u5bf9\u8bed\u6cd5\u6811\u7684\u5404\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u7684\u5173\u7cfb\u8fdb\u884c\u68c0\u67e5\uff0c\u68c0\u67e5\u8bed\u4e49\u89c4\u5219\u662f\u5426\u6709\u88ab\u8fdd\u80cc\uff0c\u540c\u65f6\u5bf9\u8bed\u6cd5\u6811\u8fdb\u884c\u5fc5\u8981\u7684\u4f18\u5316\uff0c\u6b64\u4e3a\u8bed\u4e49\u5206\u6790\u3002</p> </li> <li> <p>\u904d\u5386\u8bed\u6cd5\u6811\u7684\u7ed3\u70b9\uff0c\u5c06\u5404\u7ed3\u70b9\u8f6c\u5316\u4e3a\u4e2d\u95f4\u4ee3\u7801\uff0c\u5e76\u6309\u7279\u5b9a\u7684\u987a\u5e8f\u62fc\u88c5\u8d77\u6765\uff0c\u6b64\u4e3a\u4e2d\u95f4\u4ee3\u7801\u751f\u6210\u3002</p> </li> <li> <p>\u5bf9\u4e2d\u95f4\u4ee3\u7801\u8fdb\u884c\u4f18\u5316</p> </li> <li> <p>\u5c06\u4e2d\u95f4\u4ee3\u7801\u8f6c\u5316\u4e3a\u76ee\u6807\u4ee3\u7801</p> </li> <li> <p>\u5bf9\u76ee\u6807\u4ee3\u7801\u8fdb\u884c\u4f18\u5316\uff0c\u751f\u6210\u6700\u7ec8\u7684\u76ee\u6807\u7a0b\u5e8f</p> </li> </ol> <p>\u4ee5\u4e0a\u9636\u6bb5\u7684\u5212\u5206\u4ec5\u4ec5\u662f\u903b\u8f91\u4e0a\u7684\u5212\u5206\u3002\u5b9e\u9645\u7684\u7f16\u8bd1\u5668\u4e2d\uff0c\u5e38\u5e38\u4f1a\u5c06\u51e0\u4e2a\u9636\u6bb5\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u751a\u81f3\u8fd8\u53ef\u4ee5\u80fd\u7701\u7565\u5176\u4e2d\u67d0\u4e9b\u9636\u6bb5\u3002</p>"},{"location":"%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E9%A1%B9%E7%9B%AE/#21","title":"2.1 \u8bcd\u6cd5\u5206\u6790","text":"<p>\u7f16\u8bd1\u5668\u626b\u63cf\u6e90\u6587\u4ef6\u7684\u5b57\u7b26\u6d41\uff0c\u8fc7\u6ee4\u6389\u5b57\u7b26\u6d41\u4e2d\u7684\u7a7a\u683c\u3001\u6ce8\u91ca\u7b49\uff0c\u5e76\u5c06\u5176\u5212\u5206\u4e3a\u4e00\u4e2a\u4e2a\u7684 token\uff0c\u751f\u6210 token \u5e8f\u5217\u3002</p> <p>\u4f8b\u5982\u4e0b\u9762\u7684\u8bed\u53e5\uff1a</p> <pre><code>a = value + sum(5, 123); \n</code></pre> <p>\u5c06\u88ab\u62c6\u5206\u4e3a11\u4e2a token \uff1a</p> <pre><code>a           \u6807\u8bc6\u7b26\n=           \u8d4b\u503c\u8fd0\u7b97\u7b26\nvalue       \u6807\u8bc6\u7b26\n+           \u52a0\u53f7\nsum         \u6807\u8bc6\u7b26\n(           \u5de6\u62ec\u53f7\n5           \u6574\u6570\n,           \u9017\u53f7\n123         \u6574\u6570\n)           \u53f3\u62ec\u53f7\n;           \u5206\u53f7\n</code></pre> <p>\u8fd9\u4e2a\u6b65\u9aa4\u548c\u4e2d\u6587\u4e2d\u5206\u8bcd\u975e\u5e38\u76f8\u4f3c\uff1a</p> <pre><code>\u6211/\u559c\u6b22/\u7f8e\u4e3d\u52a8\u4eba\u7684/\u831c\u831c/\u3002  \n</code></pre> <p>\u672c\u8d28\u4e0a\uff0c\u8bcd\u6cd5\u5206\u6790\u9636\u6bb5\u6240\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u6a21\u5f0f\u5339\u914d\u3002\u5224\u65ad\u54ea\u4e9b\u5b57\u7b26\u5c5e\u4e8e\u6807\u8bc6\u7b26\uff0c\u54ea\u4e9b\u5b57\u7b26\u5c5e\u4e8e\u5173\u952e\u5b57\uff0c\u54ea\u4e9b\u5b57\u7b26\u5c5e\u4e8e\u6574\u6570...</p> <p>\u6709\u9650\u72b6\u6001\u673a </p> <p>\u90a3\u4e48\u8be5\u5982\u4f55\u505a\u6a21\u5f0f\u5339\u914d\u5462\uff1f\u8fd9\u5c31\u8981\u7528\u5230\u6709\u9650\u72b6\u6001\u673a\u4e86 (\u6ce8\uff1a\u672f\u8bed\u90fd\u662f\u7eb8\u8001\u864e\uff0c\u6709\u9650\u72b6\u6001\u673a\u4e00\u822c\u90fd\u662f\u7528 switch + while + if \u8bed\u53e5\u5b9e\u73b0\u7684)\u3002</p> <ul> <li>\u5355\u5b57\u7b26 Token\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bc6\u522b: ; ) ( { } \u7b49</li> <li>\u53cc\u5b57\u7b26 Token\uff0c\u9700\u8981\u7528 if \u8bed\u53e5\u8fdb\u884c\u5224\u65ad\uff1a+=, -=, *=, ==, !=     </li> <li>\u591a\u5b57\u7b26 Token\uff0c\u9700\u8981\u7528 while \u8bed\u53e5\u4e00\u76f4\u8bfb\u53d6\u5230\u7ed3\u675f\u6807\u5fd7\u7b26: \u6807\u8bc6\u7b26\uff0c\u5b57\u7b26\u4e32\uff0c\u6570\u5b57\uff0c\u5b57\u7b26\u7b49\u3002</li> </ul> <p>\u6709\u9650\u72b6\u6001\u673a\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p>"},{"location":"%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E9%A1%B9%E7%9B%AE/#3","title":"3 \u6548\u679c","text":"<p>\u8be5\u8bcd\u6cd5\u5206\u6790\u5668\u65e2\u80fd\u4ea4\u4e92\u5f0f\u5730\u8fd0\u884c\uff0c\u4e5f\u80fd\u591f\u5904\u7406 '.c' \u6587\u4ef6\u3002</p> <p>\u4ea4\u4e92\u5f0f\u65b9\u5f0f\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u5bf9 '.c' \u6587\u4ef6\u8fdb\u884c\u8bcd\u6cd5\u5206\u6790\uff1a</p> <pre><code>// hello.c\nint main(void) {\n    printf(\"Hello world\\n\");\n    return 0;\n}\n</code></pre> <p>\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p>"},{"location":"%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E9%A1%B9%E7%9B%AE/#4","title":"4 \u4ee3\u7801\u6846\u67b6","text":"<p>\u9996\u5148\u6211\u4eec\u6765\u770b\u770b 'main.c' \u6587\u4ef6\u3002</p> <pre><code>// main.c\n#include \"scanner.h\"\n\nstatic void run(const char* source) {\n    initScanner(source);\n    int line = -1;\n    // \u6253\u5370Token, \u9047\u5230TOKEN_EOF\u4e3a\u6b62\n    for (;;) {\n        Token token = scanToken();\n        if (token.line != line) {\n            printf(\"%4d \", token.line);\n            line = token.line;\n        } else {\n            printf(\"   | \");\n        }\n        printf(\"%2d '%.*s'\\n\", token.type, token.length, token.start);\n\n        if (token.type == TOKEN_EOF) break;\n    }\n}\n\nstatic void repl() {\n    // \u4e0e\u7528\u6237\u4ea4\u4e92\uff0c\u7528\u6237\u6bcf\u8f93\u5165\u4e00\u884c\u4ee3\u7801\uff0c\u5206\u6790\u4e00\u884c\u4ee3\u7801\uff0c\u5e76\u5c06\u7ed3\u679c\u8f93\u51fa\n    // repl\u662f\"read evaluate print loop\"\u7684\u7f29\u5199\n}\n\nstatic char* readFile(const char* path) {\n    // \u7528\u6237\u8f93\u5165\u6587\u4ef6\u540d\uff0c\u5c06\u6574\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u8bfb\u5165\u5185\u5b58\uff0c\u5e76\u5728\u672b\u5c3e\u6dfb\u52a0'\\0'\n    // \u6ce8\u610f: \u8fd9\u91cc\u5e94\u8be5\u4f7f\u7528\u52a8\u6001\u5185\u5b58\u5206\u914d\uff0c\u56e0\u6b64\u5e94\u8be5\u4e8b\u5148\u786e\u5b9a\u6587\u4ef6\u7684\u5927\u5c0f\u3002\n}\n\nstatic void runFile(const char* path) {\n    // \u5904\u7406'.c'\u6587\u4ef6:\u7528\u6237\u8f93\u5165\u6587\u4ef6\u540d\uff0c\u5206\u6790\u6574\u4e2a\u6587\u4ef6\uff0c\u5e76\u5c06\u7ed3\u679c\u8f93\u51fa\n}\n\nint main(int argc, const char* argv[]) {\n    if (argc == 1) {\n        // ./scanner \u6ca1\u6709\u53c2\u6570,\u5219\u8fdb\u5165\u4ea4\u4e92\u5f0f\u754c\u9762\n        repl();\n    } else if (argc == 2) {\n        // ./scanner file \u540e\u9762\u8ddf\u4e00\u4e2a\u53c2\u6570,\u5219\u5206\u6790\u6574\u4e2a\u6587\u4ef6\n        runFile(argv[1]);\n    } else {\n        fprintf(stderr, \"Usage: scanner [path]\\n\");\n        exit(1);\n    }\n\n    return 0;\n}\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u770b\u4e00\u770b 'scanner.h' \u6587\u4ef6\uff0c\u8fd9\u91cc\u9762\u4e3b\u8981\u662f\u4e00\u4e9b\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u3002</p> <pre><code>// scanner.h\n#ifndef scanner_h\n#define scanner_h\n\ntypedef enum {\n    // single-character tokens\n    TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN,        // '(', ')'\n    TOKEN_LEFT_BRACKET, TOKEN_RIGHT_BRACKET,    // '[', ']'\n    TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE,        // '{', '}'\n    TOKEN_COMMA, TOKEN_DOT, TOKEN_SEMICOLON,    // ',', '.', ';'\n    TOKEN_TILDE,  // '~'\n    // one or two character tokens\n    TOKEN_PLUS, TOKEN_PLUS_PLUS, TOKEN_PLUS_EQUAL, // '+', '++', '+='\n    // '-', '--', '-=', '-&gt;'\n    TOKEN_MINUS, TOKEN_MINUS_MINUS, TOKEN_MINUS_EQUAL, TOKEN_MINUS_GREATER,     \n    TOKEN_STAR, TOKEN_STAR_EQUAL,           // '*', '*='\n    TOKEN_SLASH, TOKEN_SLASH_EQUAL,         // '/', '/=', \n    TOKEN_PERCENT, TOKEN_PERCENT_EQUAL,     // '%', '%='\n    TOKEN_AMPER, TOKEN_AMPER_EQUAL, TOKEN_AMPER_AMPER,  // '&amp;', '&amp;=', '&amp;&amp;'\n    TOKEN_PIPE, TOKEN_PIPE_EQUAL, TOKEN_PIPE_PIPE,      // '|', '|=', '||'\n    TOKEN_HAT, TOKEN_HAT_EQUAL,         // '^', '^='\n    TOKEN_EQUAL, TOKEN_EQUAL_EQUAL,     // '=', '=='\n    TOKEN_BANG, TOKEN_BANG_EQUAL,       // '!', '!='\n    TOKEN_LESS, TOKEN_LESS_EQUAL, TOKEN_LESS_LESS,              // '&lt;', '&lt;=', '&lt;&lt;'\n    TOKEN_GREATER, TOKEN_GREATER_EQUAL, TOKEN_GREAER_GREATER,   // '&gt;', '&gt;=', '&gt;&gt;'\n    // \u5b57\u9762\u503c: \u6807\u8bc6\u7b26, \u5b57\u7b26, \u5b57\u7b26\u4e32, \u6570\u5b57\n    TOKEN_IDENTIFIER, TOKEN_CHARACTER, TOKEN_STRING, TOKEN_NUMBER,\n    // \u5173\u952e\u5b57\n    TOKEN_SIGNED, TOKEN_UNSIGNED,\n    TOKEN_CHAR, TOKEN_SHORT, TOKEN_INT, TOKEN_LONG,\n    TOKEN_FLOAT, TOKEN_DOUBLE,\n    TOKEN_STRUCT, TOKEN_UNION, TOKEN_ENUM, TOKEN_VOID,\n    TOKEN_IF, TOKEN_ELSE, TOKEN_SWITCH, TOKEN_CASE, TOKEN_DEFAULT,\n    TOKEN_WHILE, TOKEN_DO, TOKEN_FOR,\n    TOKEN_BREAK, TOKEN_CONTINUE, TOKEN_RETURN, TOKEN_GOTO,\n    TOKEN_CONST, TOKEN_SIZEOF, TOKEN_TYPEDEF,\n    // \u8f85\u52a9Token\n    TOKEN_ERROR, TOKEN_EOF\n} TokenType;\n\ntypedef struct {\n    TokenType type;\n    const char* start;  // start\u6307\u5411source\u4e2d\u7684\u5b57\u7b26\uff0csource\u4e3a\u8bfb\u5165\u7684\u6e90\u4ee3\u7801\u3002\n    int length;         // length\u8868\u793a\u8fd9\u4e2aToken\u7684\u957f\u5ea6\n    int line;           // line\u8868\u793a\u8fd9\u4e2aToken\u5728\u6e90\u4ee3\u7801\u7684\u54ea\u4e00\u884c, \u65b9\u4fbf\u540e\u9762\u7684\u62a5\u9519\n} Token;\n\n// \u5bf9 Scanner \u8fdb\u884c\u521d\u59cb\u5316 \nvoid initScanner(const char* source);\n\n// \u8c03\u7528scanToken(), \u8fd4\u56de\u4e0b\u4e00\u4e2aToken.\nToken scanToken();\n\n#endif\n</code></pre> <p>\u4e0b\u9762\u5c31\u662f\u6211\u4eec\u7684\u91cd\u5934\u620f\u2014\u2014\u5b9e\u73b0\u8bcd\u6cd5\u5206\u6790\u5668\u3002\u6211\u4f1a\u7ed9\u51fa\u4e00\u4e9b\u6709\u7528\u7684\u8f85\u52a9\u65b9\u6cd5\uff0c\u4ee5\u4fbf\u5927\u5bb6\u53c2\u7167\u3002</p> <pre><code>// scanner.c\n#include \"scanner.h\"\n\ntypedef struct {\n    const char* start;\n    const char* current;   \n    int line;\n} Scanner;\n\n// \u5168\u5c40\u53d8\u91cf\nScanner scanner;\n\nvoid initScanner(const char* source) { \n    // \u521d\u59cb\u5316scanner\n}\n\n/***************************************************************************************\n *                                   \u8f85\u52a9\u65b9\u6cd5                                           *\n ***************************************************************************************/\nstatic bool isAlpha(char c) {\n    return (c &gt;= 'a' &amp;&amp; c &lt;= 'z') ||\n           (c &gt;= 'A' &amp;&amp; c &lt;= 'Z') ||\n            c == '_'; \n}\n\nstatic bool isDigit(char c) {\n    return c &gt;= '0' &amp;&amp; c &lt;= '9';\n}\n\nstatic bool isAtEnd() {\n    return *scanner.current == '\\0';\n}\n\nstatic char advance() {\n    return *scanner.current++;\n}\n\nstatic char peek() {\n    return *scanner.current;\n}\n\nstatic char peekNext() {\n    if (isAtEnd()) return '\\0';\n    return *(scanner.current + 1);\n}\n\nstatic bool match(char expected) {\n    if (isAtEnd()) return false;\n    if (peek() != expected) return false;\n    scanner.current++;\n    return true;\n}\n\n// \u4f20\u5165TokenType, \u521b\u5efa\u5bf9\u5e94\u7c7b\u578b\u7684Token\uff0c\u5e76\u8fd4\u56de\u3002\nstatic Token makeToken(TokenType type) {\n    Token token;\n    token.type = type;\n    token.start = scanner.start;\n    token.length = (int)(scanner.current - scanner.start);\n    token.line = scanner.line;\n    return token;\n}\n\n// \u9047\u5230\u4e0d\u80fd\u89e3\u6790\u7684\u60c5\u51b5\u65f6\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2aERROR Token. \u6bd4\u5982\uff1a\u9047\u5230@\uff0c$\u7b49\u7b26\u53f7\u65f6\uff0c\u6bd4\u5982\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u6ca1\u6709\u5bf9\u5e94\u7684\u53f3\u5f15\u53f7\u65f6\u3002\nstatic Token errorToken(const char* message) {\n  Token token;\n  token.type = TOKEN_ERROR;\n  token.start = message;\n  token.length = (int)strlen(message);\n  token.line = scanner.line;\n  return token;\n}\n\nstatic void skipWhitespace() {\n    // \u8df3\u8fc7\u7a7a\u767d\u5b57\u7b26: ' ', '\\r', '\\t', '\\n'\u548c\u6ce8\u91ca\n    // \u6ce8\u91ca\u4ee5'//'\u5f00\u5934, \u4e00\u76f4\u5230\u884c\u5c3e\n    // \u6ce8\u610f\u66f4\u65b0scanner.line\uff01\n}\nstatic TokenType identifierType() {\n    // \u786e\u5b9aidentifier\u7c7b\u578b\u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a\n    // 1. \u5c06\u6240\u6709\u7684\u5173\u952e\u5b57\u653e\u5165\u54c8\u5e0c\u8868\u4e2d\uff0c\u7136\u540e\u67e5\u8868\u786e\u8ba4\n    // 2. \u5c06\u6240\u6709\u7684\u5173\u952e\u5b57\u653e\u5165Trie\u6811\u4e2d\uff0c\u7136\u540e\u67e5\u8868\u786e\u8ba4\n    // Trie\u6811\u7684\u65b9\u5f0f\u4e0d\u7ba1\u662f\u7a7a\u95f4\u4e0a\u8fd8\u662f\u65f6\u95f4\u4e0a\u90fd\u4f18\u4e8e\u54c8\u5e0c\u8868\u7684\u65b9\u5f0f\n}\n\nstatic Token identifier() {\n    // IDENTIFIER\u5305\u542b: \u5b57\u6bcd\uff0c\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\n    while (isAlpha(peek()) || isDigit(peek())) {\n        advance();\n    }\n    // \u8fd9\u6837\u7684Token\u53ef\u80fd\u662f\u6807\u8bc6\u7b26, \u4e5f\u53ef\u80fd\u662f\u5173\u952e\u5b57, identifierType()\u662f\u7528\u6765\u786e\u5b9aToken\u7c7b\u578b\u7684\n    return makeToken(identifierType());\n}\n\nstatic Token number() {\n    // \u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u5c06NUMBER\u7684\u89c4\u5219\u5b9a\u4e49\u5982\u4e0b:\n    // 1. NUMBER\u53ef\u4ee5\u5305\u542b\u6570\u5b57\u548c\u6700\u591a\u4e00\u4e2a'.'\u53f7\n    // 2. '.'\u53f7\u524d\u9762\u8981\u6709\u6570\u5b57\n    // 3. '.'\u53f7\u540e\u9762\u4e5f\u8981\u6709\u6570\u5b57\n    // \u8fd9\u4e9b\u90fd\u662f\u5408\u6cd5\u7684NUMBER: 123, 3.14\n    // \u8fd9\u4e9b\u90fd\u662f\u4e0d\u5408\u6cd5\u7684NUMBER: 123., .14\n}\n\nstatic Token string() {\n    // \u5b57\u7b26\u4e32\u4ee5\"\u5f00\u5934\uff0c\u4ee5\"\u7ed3\u5c3e\uff0c\u800c\u4e14\u4e0d\u80fd\u8de8\u884c\n}\n\nstatic Token character() {\n    // \u5b57\u7b26'\u5f00\u5934\uff0c\u4ee5'\u7ed3\u5c3e\uff0c\u800c\u4e14\u4e0d\u80fd\u8de8\u884c   \n}\n\n/***************************************************************************************\n *                                      \u5206\u8bcd                                            *\n ***************************************************************************************/\nToken scanToken() {\n    // \u8df3\u8fc7\u524d\u7f6e\u7a7a\u767d\u5b57\u7b26\u548c\u6ce8\u91ca\n    skipWhitespace();\n    // \u8bb0\u5f55\u4e0b\u4e00\u4e2aToken\u7684\u8d77\u59cb\u4f4d\u7f6e\n    scanner.start = scanner.current;\n\n    if (isAtEnd()) return makeToken(TOKEN_EOF);\n\n    char c = advance();\n    if (isAlpha(c)) return identifier();\n    if (isDigit(c)) return number();\n\n    switch (c) {\n        // single-character tokens\n        case '(': return makeToken(TOKEN_LEFT_PAREN);\n        ... // TODO\n\n        // one or two characters tokens\n        case '+':\n            if (match('+')) return makeToken(TOKEN_PLUS_PLUS);\n            else if (match('=')) return makeToken(TOKEN_PLUS_EQUAL);\n            else return makeToken(TOKEN_PLUS);\n        ... // TODO\n\n        // various-character tokens\n        case '\"': return string();\n        case '\\'': return charater();\n    }\n\n    return errorToken(\"Unexpected character.\");\n}\n</code></pre> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u91cd\u70b9\u770b\u4e00\u4e0b\uff1a\u5982\u4f55\u5224\u65ad\u4e00\u4e2aToken\u5230\u5e95\u662f\u6807\u8bc6\u7b26\u8fd8\u662f\u5173\u952e\u5b57\u3002\u8fd9\u91cc\u6211\u4eec\u91c7\u7528Trie\u6811\u7684\u65b9\u5f0f\u8fdb\u884c\u5224\u65ad\uff0c\u56e0\u4e3a\u4e0d\u7ba1\u662f\u4ece\u7a7a\u95f4\u4e0a\u8fd8\u662f\u65f6\u95f4\u4e0a\uff0cTrie\u6811\u7684\u65b9\u5f0f\u90fd\u4f18\u4e8e\u54c8\u5e0c\u8868\u7684\u65b9\u5f0f\u3002\u5728\u903b\u8f91\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 C \u8bed\u8a00\u7684\u5173\u952e\u5b57\u7ec4\u7ec7\u6210\u4e0b\u9762\u8fd9\u6837\u7684\u5f62\u5f0f\uff1a</p> <p></p> <pre><code>// \u53c2\u6570\u8bf4\u660e\uff1a\n// start: \u4ece\u54ea\u4e2a\u7d22\u5f15\u4f4d\u7f6e\u5f00\u59cb\u6bd4\u8f83\n// length: \u8981\u6bd4\u8f83\u5b57\u7b26\u7684\u957f\u5ea6\n// rest: \u8981\u6bd4\u8f83\u7684\u5185\u5bb9\n// type: \u5982\u679c\u5b8c\u5168\u5339\u914d\uff0c\u5219\u8bf4\u660e\u662ftype\u7c7b\u578b\u7684\u5173\u952e\u5b57\nstatic TokenType checkKeyword(int start, int length, const char* rest, TokenType type) {\n    int len = (int)(scanner.current - scanner.start);\n    if (start + length == len &amp;&amp; memcmp(scanner.start + start, rest, length) == 0) {\n        return type;\n    }\n    return TOKEN_IDENTIFIER;\n}\n\n// \u5224\u65ad\u5f53\u524dToken\u5230\u5e95\u662f\u6807\u8bc6\u7b26\u8fd8\u662f\u5173\u952e\u5b57\nstatic TokenType identifierType() {\n    char c = scanner.start[0];\n    // \u7528switch\u8bed\u53e5\u5b9e\u73b0Trie\u6811\n    switch (c) {\n        case 'b': return checkKeyword(1, 4, \"reak\", TOKEN_BREAK);\n        ... // TODO\n    }\n\n    // identifier\n    return TOKEN_IDENTIFIER;\n}\n</code></pre>"}]}